<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://teju85.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://teju85.github.io/blog/" rel="alternate" type="text/html" /><updated>2019-08-02T16:47:00+05:30</updated><id>https://teju85.github.io/blog/feed.xml</id><title type="html">Quagmire</title><subtitle>Stuff I find cool/useful</subtitle><entry><title type="html">Installing Ubuntu 19.04 Server on desktop with Nvidia GPUs</title><link href="https://teju85.github.io/blog/2019/08/01/ubuntu-server.html" rel="alternate" type="text/html" title="Installing Ubuntu 19.04 Server on desktop with Nvidia GPUs" /><published>2019-08-01T00:00:00+05:30</published><updated>2019-08-01T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/08/01/ubuntu-server</id><content type="html" xml:base="https://teju85.github.io/blog/2019/08/01/ubuntu-server.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Notes based on my experience installing and setting up a desktop machine to run
Ubuntu 19.04 server.&lt;/p&gt;

&lt;h2 id=&quot;installing-ubuntu&quot;&gt;Installing Ubuntu&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Download iso from &lt;a href=&quot;https://ubuntu.com/download/server&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download unetbootin from &lt;a href=&quot;https://unetbootin.github.io/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Have an empty ~4GB USB pen drive&lt;/li&gt;
  &lt;li&gt;Use unetbootin to flash the above iso into this usb drive&lt;/li&gt;
  &lt;li&gt;Boot via this usb drive on your desktop&lt;/li&gt;
  &lt;li&gt;In boot menu select ‘Install Ubuntu …’&lt;/li&gt;
  &lt;li&gt;Follow the instructions on screen&lt;/li&gt;
  &lt;li&gt;Don’t forget to select “Install OpenSSH”, if you want remote access&lt;/li&gt;
  &lt;li&gt;Select to upgrade and install ubuntu (optional)&lt;/li&gt;
  &lt;li&gt;Provide hostname, username and credentials&lt;/li&gt;
  &lt;li&gt;Wait until finished!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setting-up&quot;&gt;Setting up&lt;/h2&gt;
&lt;h3 id=&quot;basics&quot;&gt;Basics&lt;/h3&gt;
&lt;p&gt;My personal preference is to use python3. So, I just remove python2.7.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt remove python2.7 python python2.7-minimal
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt purge python2.7 python python2.7-minimal
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt autoremove
&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/bin/python3 /usr/bin/python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some essentials:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;curl g++ gcc git make tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker&quot;&gt;docker&lt;/h3&gt;
&lt;p&gt;Following steps will let you run docker commands without &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://get.docker.com/ | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;groupadd docker
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
newgrp docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nvidia-driver&quot;&gt;nvidia driver&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Make sure card is getting detected: &lt;code class=&quot;highlighter-rouge&quot;&gt;lspci | grep -i nv&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Install kernel headers: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install linux-headers-$(uname -r)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Download toolkit installer: &lt;code class=&quot;highlighter-rouge&quot;&gt;wget https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.168_418.67_linux.run&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install only the driver: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo sh cuda_10.1.168_418.67_linux.run --driver&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Disable nouveau driver: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo sh -c &quot;echo blacklist nouveau &amp;gt; /etc/modprobe.d/blacklist-nouveau.conf &amp;amp;&amp;amp; echo options nouveau modeset=0 &amp;gt;&amp;gt; /etc/modprobe.d/blacklist-nouveau.conf &amp;amp;&amp;amp; update-initramfs -u &amp;amp;&amp;amp; reboot&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nvidia-smi&lt;/code&gt; should now run successfully.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;nvidia-docker&quot;&gt;nvidia-docker&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://nvidia.github.io/nvidia-docker/gpgkey | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class=&quot;c&quot;&gt;# this is because 19.04 is not yet supported, at the time of this writing&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# thus, force fallback on 18.04 version's release&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# that seems to be working fine&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#distribution=$(. /etc/os-release;echo $ID$VERSION_ID)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;18.04
curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://nvidia.github.io/nvidia-docker/&lt;span class=&quot;nv&quot;&gt;$distribution&lt;/span&gt;/nvidia-docker.list | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/nvidia-docker.list
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nvidia-docker2
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pkill &lt;span class=&quot;nt&quot;&gt;-SIGHUP&lt;/span&gt; dockerd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="linux" /><summary type="html">Introduction Notes based on my experience installing and setting up a desktop machine to run Ubuntu 19.04 server.</summary></entry><entry><title type="html">Resolving ADB unauthorized issue</title><link href="https://teju85.github.io/blog/2019/07/09/adb-unauthorized.html" rel="alternate" type="text/html" title="Resolving ADB unauthorized issue" /><published>2019-07-09T00:00:00+05:30</published><updated>2019-07-09T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/07/09/adb-unauthorized</id><content type="html" xml:base="https://teju85.github.io/blog/2019/07/09/adb-unauthorized.html">&lt;h3 id=&quot;issue&quot;&gt;Issue&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ANDROID_SDK_HOME&lt;/span&gt;/platform-tools
adb devices
List of devices attached
fffffffffffffff        unauthorized
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One would see the ‘unauthorized’ keyword in the place of the device name.
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell&lt;/code&gt; would also fail stating something about ‘keys not set’.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Unplug your android device from the computer, if it is connected&lt;/li&gt;
  &lt;li&gt;Inside your computer:
    &lt;ul&gt;
      &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;$ANDROID_SDK_HOME/platform-tools&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;adb keygen .android/adb_key&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Open your android device&lt;/li&gt;
  &lt;li&gt;Go to Settings -&amp;gt; Developer Options&lt;/li&gt;
  &lt;li&gt;Touch ‘Revoke USB debugging authorizations’&lt;/li&gt;
  &lt;li&gt;Plug the device back into the computer&lt;/li&gt;
  &lt;li&gt;The device should now ask you for whether to trust this computer. Say yes.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="android" /><summary type="html">Issue cd $ANDROID_SDK_HOME/platform-tools adb devices List of devices attached fffffffffffffff unauthorized One would see the ‘unauthorized’ keyword in the place of the device name. adb shell would also fail stating something about ‘keys not set’.</summary></entry><entry><title type="html">Yoga, Meditation and Japa Sadhana</title><link href="https://teju85.github.io/blog/2019/05/02/yoga-and-japa-sadhana.html" rel="alternate" type="text/html" title="Yoga, Meditation and Japa Sadhana" /><published>2019-05-02T00:00:00+05:30</published><updated>2019-05-02T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/05/02/yoga-and-japa-sadhana</id><content type="html" xml:base="https://teju85.github.io/blog/2019/05/02/yoga-and-japa-sadhana.html">&lt;h3 id=&quot;yoga-meditation-and-japa-sadhana&quot;&gt;Yoga, Meditation and Japa Sadhana&lt;/h3&gt;
&lt;p&gt;This book by Swami Krishnananda can be found &lt;a href=&quot;https://www.swami-krishnananda.org/ymj/Yoga_Meditation_and_Japa_Sadhana.pdf&quot;&gt;here&lt;/a&gt;.
Swami Krishnananda introduces us to the concepts of yoga, meditation and japa
sadhana starting from the basic concept of consciousness. I feel like this is an
ideal read for someone starting along the spiritual practice (sadhana).&lt;/p&gt;

&lt;h3 id=&quot;summary-part-i&quot;&gt;Summary Part I&lt;/h3&gt;
&lt;h4 id=&quot;yoga-and-meditation&quot;&gt;Yoga and Meditation&lt;/h4&gt;
&lt;p&gt;Yoga is a system of harmony. Yoga is stability of personality, equilibrium of
consciousness and harmony in all walks of life. Harmony is adjustment of oneself
with ones external.&lt;/p&gt;

&lt;p&gt;When you say ‘I’, you are not referring to your limbs, stomach or other parts of
your body. You are referring to your conscious and spiritual being. You are
essentially consciousness that animates this body. Similarly, the concept of
Virat Purusha (Cosmic Being) as mentioned in Vedas, pertains to the consciousness
of the cosmos itself. We, humans, are integral part of this cosmos, vitaly
related. Thus, our actions affect the whole cosmos, just like any malfunctioning
of any part of our body affects the whole body’s function itself. Extending this
consciousness to the whole world is what the apex of meditation is and this is
what is Yogic Contemplation. God is just the name given to this “world-individual”.
This all-encompassing consciousness is what is termed by Vedas as Parama-Purusha
(Supreme Being). Being vitaly related to this universe, this means that our
salvation lies in being friendly with the universe as a whole.&lt;/p&gt;

&lt;p&gt;Our mind jumps from one object to another. It is usually not trained to perceive
Consciousness. Bringing our minds to be aware of the Consciousness that animates
this universe is termed as meditation.&lt;/p&gt;

&lt;h4 id=&quot;practical-techniques&quot;&gt;Practical Techniques&lt;/h4&gt;
&lt;p&gt;Harmony comes in various grades:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You should be harmonious in your relationship with other people in the world.&lt;/li&gt;
  &lt;li&gt;You must be harmonious within your own personality.&lt;/li&gt;
  &lt;li&gt;You must have harmony of muscles and nervous system.&lt;/li&gt;
  &lt;li&gt;Bring the breathing process (prana) into harmony.&lt;/li&gt;
  &lt;li&gt;Control of the activity of the senses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the prana is calm (via pranayama), the mind is calm, our senses do not ask
for tempting objects, one is ready for concentration and meditation. This is real
yoga.&lt;/p&gt;

&lt;p&gt;Concentration is of 3 forms:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Concentration on external points - the aim here is to train the mind to think
of only one external object by concentrating on it.&lt;/li&gt;
  &lt;li&gt;Concentration on internal points - by concentrating on certain centers (chakras)
of our body.&lt;/li&gt;
  &lt;li&gt;Concentration on the universal - by meditating upon the consciousness prevailing
this universe itself. For eg: by chanting OM.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;day-to-day-practice&quot;&gt;Day-to-day practice&lt;/h4&gt;
&lt;p&gt;Sadhana has 3 prongs:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A daily routine of practice - have a fixed routine and be disciplined at it.
There should be 3 items in this:
  a. Japa - chanting a mantra to maintain the same consciousness
  b. Study - reading scriptures or texts
  c. Meditation - should be done at the same time, at the same place, in the same
direction, by sitting in the same asana daily.&lt;/li&gt;
  &lt;li&gt;An annual resolve - vow to give up one bad habit. If this resolution gets broken
fast on that day.&lt;/li&gt;
  &lt;li&gt;A spiritual diary - at the end of the day review what you have done today.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;summary-part-ii&quot;&gt;Summary Part II&lt;/h3&gt;
&lt;h4 id=&quot;japa-sadhana&quot;&gt;Japa Sadhana&lt;/h4&gt;
&lt;p&gt;World of experience has 3 inter-connected factors: thought, name and form. Of the
8 known forms of yoga, Japa Yoga is considered to be the most efficacious approach
to God. In Vedic system, name and form have tight relation wherein a particular
name automatically projects a certain form in our minds (not so true in our modern
societies!). They also are related to the thought behind the expression of them.
Sadhana, in this sense, is to evoke a particular form in our minds which rouses
in us a higher degree of truth than the one in which we are currently placed in,
until we reach the ultimate truth, the Ishvara. Patanjali Maharshi terms Japa as
the recitation of a particular name/mantra alongwhile contemplating on its
meaning.&lt;/p&gt;

&lt;p&gt;The recitation of a mantra/name-of-god, helps us reveal the sattva guna (quality)
in us. Inertia, distraction and equilibrium are termed as tamas, rajas and sattva
gunas, respectively.&lt;/p&gt;

&lt;p&gt;Japa involves 3 important shaktis (powers):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;mantra-shakti - power hidden in the juxtaposition of the letters of the formula&lt;/li&gt;
  &lt;li&gt;devata-shakti - power of inherence of a higher principle in the mantra&lt;/li&gt;
  &lt;li&gt;sadhana-shakti - power within oneself&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Prayers can work wonders in this manner too! The prayer we offer through mantra
sadhana or japa are converted into impersonal force, which is the power of God,
and the miracle is worked by God himself. Prayers are powers.&lt;/p&gt;

&lt;p&gt;With japa sadhana we attune our inner pysche with the Ishvara-Shakti (Divine Will).&lt;/p&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">Yoga, Meditation and Japa Sadhana This book by Swami Krishnananda can be found here. Swami Krishnananda introduces us to the concepts of yoga, meditation and japa sadhana starting from the basic concept of consciousness. I feel like this is an ideal read for someone starting along the spiritual practice (sadhana).</summary></entry><entry><title type="html">Pragmatic Programmer</title><link href="https://teju85.github.io/blog/2019/02/17/pragmatic-programmer.html" rel="alternate" type="text/html" title="Pragmatic Programmer" /><published>2019-02-17T00:00:00+05:30</published><updated>2019-02-17T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/02/17/pragmatic-programmer</id><content type="html" xml:base="https://teju85.github.io/blog/2019/02/17/pragmatic-programmer.html">&lt;h3 id=&quot;pragmatic-programmer&quot;&gt;Pragmatic Programmer&lt;/h3&gt;
&lt;p&gt;“Pragmatic Programmer - from journeyman to master” is a book on programming
written by Andrew Hunt and David Thomas. This book can be found
&lt;a href=&quot;https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;here&lt;/a&gt;.
IMO, every programmer who codes for living should read this in order to understand
how to convert requirements to specifications to a flexible and maintainable code.
One message that stands out from this book is “You shouldn’t be wedded to any
particular technology, but have a broad enough background and experience base to
allow you to choose good solutions in particular situations.”&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;h4 id=&quot;naming&quot;&gt;Naming&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use intention revealing names&lt;/li&gt;
  &lt;li&gt;Avoid ambiguous variable names&lt;/li&gt;
  &lt;li&gt;Use pronounceable names&lt;/li&gt;
  &lt;li&gt;Class names must be nouns&lt;/li&gt;
  &lt;li&gt;Method names must be verbs&lt;/li&gt;
  &lt;li&gt;Choose a consistent style and stick to it!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;comments&quot;&gt;Comments&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Comments Lie!&lt;/li&gt;
  &lt;li&gt;Avoid them as much as possible&lt;/li&gt;
  &lt;li&gt;Don’t keep commented code. Delete it!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;data-structures&quot;&gt;Data Structures&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t blindly add getters and setters&lt;/li&gt;
  &lt;li&gt;Objects and data structures are anti-symmetric!&lt;/li&gt;
  &lt;li&gt;Avoid creating hybrid of these two!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use exceptions rather than error codes&lt;/li&gt;
  &lt;li&gt;Provide meaningful messages with the exceptions thrown&lt;/li&gt;
  &lt;li&gt;Create exception classes based on the needs of the caller&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tdd&quot;&gt;TDD&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Write tests first, code later!&lt;/li&gt;
  &lt;li&gt;Test code is as important as production code&lt;/li&gt;
  &lt;li&gt;When in doubt follow the above rule!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;classes&quot;&gt;Classes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Should follow SRP&lt;/li&gt;
  &lt;li&gt;Should follow OCP&lt;/li&gt;
  &lt;li&gt;Should follow DIP&lt;/li&gt;
  &lt;li&gt;When classes lose cohesion, split them&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;systems&quot;&gt;Systems&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Construction of a system must be separated from its use&lt;/li&gt;
  &lt;li&gt;One such mechanism is Dependency Injection&lt;/li&gt;
  &lt;li&gt;Use the simplest thing that can possibly work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;functions&quot;&gt;Functions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Must be small&lt;/li&gt;
  &lt;li&gt;Must do only one thing&lt;/li&gt;
  &lt;li&gt;Use descriptive names&lt;/li&gt;
  &lt;li&gt;Have less number of input arguments&lt;/li&gt;
  &lt;li&gt;Have no side effects&lt;/li&gt;
  &lt;li&gt;Try to avoid output arguments&lt;/li&gt;
  &lt;li&gt;Always follow command-query-separation&lt;/li&gt;
  &lt;li&gt;Prefer exceptions to returning error codes&lt;/li&gt;
  &lt;li&gt;Don’t Repeat Yourself (DRY)!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;formatting&quot;&gt;Formatting&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Small source files preferable over large ones&lt;/li&gt;
  &lt;li&gt;Use vertical blank lines for visual cues&lt;/li&gt;
  &lt;li&gt;Concepts closely related must be vertically closer&lt;/li&gt;
  &lt;li&gt;This is just like paragraphs&lt;/li&gt;
  &lt;li&gt;Keep all instance variables at one place&lt;/li&gt;
  &lt;li&gt;Keep the lines short&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;boundaries&quot;&gt;Boundaries&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;User learning-tests to understand third party APIs&lt;/li&gt;
  &lt;li&gt;Isolate boundaries through wrapping them inside our own class&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;emergence&quot;&gt;Emergence&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Four rules of simple design:&lt;/li&gt;
  &lt;li&gt;Runs all tests&lt;/li&gt;
  &lt;li&gt;Contains no duplication&lt;/li&gt;
  &lt;li&gt;Expresses programmer’s intent&lt;/li&gt;
  &lt;li&gt;Minimum number of classes and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Try to avoid sharing data&lt;/li&gt;
  &lt;li&gt;Keep the concurrent code separate&lt;/li&gt;
  &lt;li&gt;Avoid using more than one method on shared object&lt;/li&gt;
  &lt;li&gt;Keep your synchronized sections as small as possible&lt;/li&gt;
  &lt;li&gt;Treat spurious failures as candidate threading issues&lt;/li&gt;
  &lt;li&gt;Get your non-threaded code working first&lt;/li&gt;
  &lt;li&gt;It is better when broken code fails as early as possible&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">Pragmatic Programmer “Pragmatic Programmer - from journeyman to master” is a book on programming written by Andrew Hunt and David Thomas. This book can be found here. IMO, every programmer who codes for living should read this in order to understand how to convert requirements to specifications to a flexible and maintainable code. One message that stands out from this book is “You shouldn’t be wedded to any particular technology, but have a broad enough background and experience base to allow you to choose good solutions in particular situations.”</summary></entry><entry><title type="html">Checklist Manifesto: How to get Things Right</title><link href="https://teju85.github.io/blog/2019/02/01/checklist-manifesto.html" rel="alternate" type="text/html" title="Checklist Manifesto: How to get Things Right" /><published>2019-02-01T00:00:00+05:30</published><updated>2019-02-01T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/02/01/checklist-manifesto</id><content type="html" xml:base="https://teju85.github.io/blog/2019/02/01/checklist-manifesto.html">&lt;h3 id=&quot;what-to-trust-in-a-post-truth-world&quot;&gt;What to trust in a ‘post-truth’ world&lt;/h3&gt;
&lt;p&gt;By Dr. Atul Gawande. This book can be found &lt;a href=&quot;https://www.amazon.com/Checklist-Manifesto-How-Things-Right/dp/0312430000&quot;&gt;here&lt;/a&gt;.
Dr. Atul shows the benefits of a simple checklist against the complexity of
our lives.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Three types of failures:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Task itself is impossible&lt;/li&gt;
  &lt;li&gt;failure due to ignorance&lt;/li&gt;
  &lt;li&gt;failure due to ineptitude&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;problem-of-extreme-complexity&quot;&gt;Problem of extreme complexity&lt;/h4&gt;
&lt;p&gt;We are living in a world of super specialization. Even then there are mistakes
committed due to extremely complex procedures and scenarios, especially in
medicine.&lt;/p&gt;

&lt;h4 id=&quot;the-checklist&quot;&gt;The checklist&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;our world/fields today have become too complex to be put into our memory&lt;/li&gt;
  &lt;li&gt;example of WWII Boeing model 299 plane: Too complex for one pilot. But with a
simple checklist the pilots were able to fly without accident&lt;/li&gt;
  &lt;li&gt;two ways one fails in a complex environment: failure to remember steps - its
easy to miss mundane steps when there are more pressing events at hand. Easy
to convince ourselves to skip a simple step&lt;/li&gt;
  &lt;li&gt;checklists are a way to discipline ourselves into following these steps&lt;/li&gt;
  &lt;li&gt;they also help in our memory recall especially while under pressure&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;end-of-the-master-builder&quot;&gt;End of the master builder&lt;/h4&gt;
&lt;p&gt;Checklists are a cognitive net against our inherent flaws in memory, attention
and thoroughness. 3 types of problems:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;simple: Like preparing a dish. Once a recipe is prepared that’s good enough&lt;/li&gt;
  &lt;li&gt;complicated: Like building rocket. Can be broken down into series of simple
problems. But there are unforeseen issues even for the experienced.&lt;/li&gt;
  &lt;li&gt;complex: Like raising a child. Experience in raising one’s child well may not
guarantee success with another. There’s no recipe!&lt;/li&gt;
  &lt;li&gt;master builder era is long gone. The complexity in today’s world is too much
for one guy to manage and track. The idea is to have experts in multiple
sub-specializations manage individual problems. But the crucial aspect is
that those experts need to get together to resolve any unexpected scenarios
or issues that span across multiple specializations. Man is fallible not men
less so! Fine example to this is the construction industry&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;the-idea&quot;&gt;The idea&lt;/h4&gt;
&lt;p&gt;In case of routine tasks and problems, we need a central authority who dictates
what needs to be done to their subordinates. In case of complex, unforeseen
circumstances, this power needs to be as far away from the center as possible.
Best example was 2005’s Katrina hurricane. Where government wasn’t still sure
who should provide help to stranded citizens, Walmart had supplied loads of help
already. This worked because Walmart decentralized the power away from center to
the local employees in wake of this incident. Under very complex scenarios
decentralization of power is the right approach. Under cases of extreme
complexity, which is behind anyone persons’ capacity, we need to decentralize
power and distribute it to respective front-lines.&lt;/p&gt;

&lt;h4 id=&quot;the-first-try&quot;&gt;The first try&lt;/h4&gt;
&lt;p&gt;The author recounts his experience while consulting for WHO regarding surgical
safety procedures world wide. Describes various hospitals trying to implement
checklists during surgery. And the importance of communication between the OR
group. The author tries to give such a checklist a try in his own hospital. Also
mentions a peculiar (yet intuitive) study where just by knowing the names of the
members in a group increased the communication in it. But because of ambiguities
and the length of the checklist, they had to stop using it!&lt;/p&gt;

&lt;h4 id=&quot;the-checklist-factory&quot;&gt;The checklist factory&lt;/h4&gt;
&lt;p&gt;There are 2 kinds of checklists:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;bad ones - very long, detailed, treat people as dumb and list out every steps&lt;/li&gt;
  &lt;li&gt;good ones - very short and precise, only list the most critical steps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But checklists can’t make people to follow them!&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;READ-DO checklist - people read items off the checklist, execute them and
then tick them off&lt;/li&gt;
  &lt;li&gt;DO-CONFIRM checklist - everyone executes a few steps from their memory and
then pauses to confirm whether all items from the list have been executed or
not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A good checklist typically contains about 5 to 9 items. Most importantly the
checklist should be tested out in real world, at least once, before deploying it
widely!!&lt;/p&gt;

&lt;h4 id=&quot;the-test&quot;&gt;The test&lt;/h4&gt;
&lt;p&gt;Keeping the list minimal is the biggest challenge:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;prune too many items, checklist could be too short to be effective in
preventing errors&lt;/li&gt;
  &lt;li&gt;keep too many items, people hate to follow long lists&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There’s a delicate balance between brevity and effectiveness&lt;/p&gt;

&lt;h4 id=&quot;hero-in-the-age-of-checklists&quot;&gt;Hero in the age of checklists&lt;/h4&gt;
&lt;p&gt;Its just not about ticking-off items in checklist, it is about teamwork. Even
these checklists have found to be very useful in other fields like investing.
But very few have become the fan of checklists, despite their proven checklists!
We still think that people who follow their intuition are heroes and are real
men!&lt;/p&gt;

&lt;p&gt;The fear people have on checklists is rigidity:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;they think checklists will make them mindless automatons&lt;/li&gt;
  &lt;li&gt;but in reality its the opposite!&lt;/li&gt;
  &lt;li&gt;checklists take the routine (but important) stuffs off the brain’s working
memory&lt;/li&gt;
  &lt;li&gt;thus checklists will enable us in our fields&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Heroes in today’s world are those who&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;know when to improvise and when not to&lt;/li&gt;
  &lt;li&gt;understand the importance of teamwork&lt;/li&gt;
  &lt;li&gt;know how to work in today’s complex environments&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Checklists must aid, not hinder. We are meant to be for excitement and novelty.
Never to give attention to details and be disciplined. That’s where checklists
come to help us. Under the complexity of today’s world we have nothing else left
but to try checklists!&lt;/p&gt;

&lt;h4 id=&quot;the-save&quot;&gt;The save&lt;/h4&gt;
&lt;p&gt;Interesting story of an operation where the author accidentally tore the
patient’s vena-cava. But due to checklist they followed and worked as a team
they were able to atleast save the patient.&lt;/p&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">What to trust in a ‘post-truth’ world By Dr. Atul Gawande. This book can be found here. Dr. Atul shows the benefits of a simple checklist against the complexity of our lives.</summary></entry><entry><title type="html">What to trust in a ‘post-truth’ world</title><link href="https://teju85.github.io/blog/2019/01/28/what-to-trust-in-a-post-truth-world.html" rel="alternate" type="text/html" title="What to trust in a 'post-truth' world" /><published>2019-01-28T00:00:00+05:30</published><updated>2019-01-28T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/01/28/what-to-trust-in-a-post-truth-world</id><content type="html" xml:base="https://teju85.github.io/blog/2019/01/28/what-to-trust-in-a-post-truth-world.html">&lt;h3 id=&quot;what-to-trust-in-a-post-truth-world&quot;&gt;What to trust in a ‘post-truth’ world&lt;/h3&gt;
&lt;p&gt;By Alex Edmonds. The recorded TED talk can be found &lt;a href=&quot;https://www.ted.com/talks/alex_edmans_what_to_trust_in_a_post_truth_world/up-next&quot;&gt;here&lt;/a&gt;.
Alex talks about how confirmation bias could lead us astray in the current
world. He then provides a very compelling argument, urging us to consider data
and evidence very consciously.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Confirmation bias - we accept stories that match our beliefs and reject those
that don’t. This is especially true in politics, business and health.&lt;/li&gt;
  &lt;li&gt;We need to check if the data supports the theory, but instead we end up
checking of the data is consistent with the theory!&lt;/li&gt;
  &lt;li&gt;This consistency is alone not sufficient, because the same data could also be
consistent with the rival theory! (Due to confirmation bias, we’ll never
check for this)&lt;/li&gt;
  &lt;li&gt;Because of this bias we also accept a fact as data. And also accept data as
evidence, even if it consistent with rival theories.&lt;/li&gt;
  &lt;li&gt;Data is a collection of facts. Evidence is the data that supports one theory
while ruling our others.&lt;/li&gt;
  &lt;li&gt;A story is not fact, because it may not be true.&lt;/li&gt;
  &lt;li&gt;A fact is not data, because it might not be representative.&lt;/li&gt;
  &lt;li&gt;Data is not evidence, because it might be consistent with rival theories.&lt;/li&gt;
  &lt;li&gt;Actively seek out for rival points.&lt;/li&gt;
  &lt;li&gt;Play devil’s advocate with your decisions/theories.&lt;/li&gt;
  &lt;li&gt;Pause before sharing anything!&lt;/li&gt;
  &lt;li&gt;Only if it’s true, it can be a fact. Only if it’s representative, it can be
data. Only if it’s supportive, can it be evidence.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="ted-talks" /><summary type="html">What to trust in a ‘post-truth’ world By Alex Edmonds. The recorded TED talk can be found here. Alex talks about how confirmation bias could lead us astray in the current world. He then provides a very compelling argument, urging us to consider data and evidence very consciously.</summary></entry><entry><title type="html">Teditor v1.0.0</title><link href="https://teju85.github.io/blog/2019/01/26/teditor.html" rel="alternate" type="text/html" title="Teditor v1.0.0" /><published>2019-01-26T00:00:00+05:30</published><updated>2019-01-26T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/01/26/teditor</id><content type="html" xml:base="https://teju85.github.io/blog/2019/01/26/teditor.html">&lt;h3 id=&quot;teditor-v100&quot;&gt;Teditor v1.0.0!&lt;/h3&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/2018/06/24/teditor.html&quot;&gt;an old post&lt;/a&gt; of
mine, I had announced Teditor, a terminal based editor completely written in
C++. Today, I’m glad to announce the release of its next version: v1.0.0. It
can be found &lt;a href=&quot;https://github.com/teju85/teditor/releases/tag/1.0.0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;
&lt;p&gt;Changes/features in this release:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Completely revamped command interface, so that users don’t have explicitly
encode undo/redo commands. This makes writing of commands/extensions much
easier.&lt;/li&gt;
  &lt;li&gt;Every new command can be made to self-document and now there’s a help command
to query just that!&lt;/li&gt;
  &lt;li&gt;Fixes to many bugs in editing commands, especially with active regions.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="teditor" /><summary type="html">Teditor v1.0.0! In an old post of mine, I had announced Teditor, a terminal based editor completely written in C++. Today, I’m glad to announce the release of its next version: v1.0.0. It can be found here.</summary></entry><entry><title type="html">Design Principles and Design Patterns</title><link href="https://teju85.github.io/blog/2019/01/26/design-patterns.html" rel="alternate" type="text/html" title="Design Principles and Design Patterns" /><published>2019-01-26T00:00:00+05:30</published><updated>2019-01-26T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/01/26/design-patterns</id><content type="html" xml:base="https://teju85.github.io/blog/2019/01/26/design-patterns.html">&lt;h3 id=&quot;the-book&quot;&gt;The Book&lt;/h3&gt;
&lt;p&gt;This is a really concise article/chapter on software design principles and
patterns by Robert C. Martin (commonly called Uncle Bob). The pdf version of
this book/chapter is available
&lt;a href=&quot;https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;software arch is multi-tiered
    &lt;ul&gt;
      &lt;li&gt;At the highest level, there are the architecture patterns that define the
overall shape and structure of software applications.&lt;/li&gt;
      &lt;li&gt;Down a level is the architecture that is specifically related to the purpose
of the software application.&lt;/li&gt;
      &lt;li&gt;Yet another level down resides the architecture of the modules and their
interconnections. This is the domain of design patterns, packages,
components, and classes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;four symptoms of rotting design: rigidity, fragility, immobility, and
viscosity.
    &lt;ul&gt;
      &lt;li&gt;rigidity: tendency for the sw to be difficult to change&lt;/li&gt;
      &lt;li&gt;fragility: tendency of sw to break at many places even on a simple change&lt;/li&gt;
      &lt;li&gt;immobility: inability to reuse parts of other or the same project&lt;/li&gt;
      &lt;li&gt;viscosity of design: when design preserving solutions are harder to
implement than hacks&lt;/li&gt;
      &lt;li&gt;viscosity of environment: development environment is inefficient&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;reasons for sw rot
    &lt;ul&gt;
      &lt;li&gt;changing reqs&lt;/li&gt;
      &lt;li&gt;bad dependency management&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OCP: open closed principle
    &lt;ul&gt;
      &lt;li&gt;A module should be open for extension but closed for modification&lt;/li&gt;
      &lt;li&gt;the most important rule of sw design&lt;/li&gt;
      &lt;li&gt;abstraction is the key to OCP&lt;/li&gt;
      &lt;li&gt;achieved through runtime and static polymorphism&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you don’t have to change working code, you aren’t likely to break it.&lt;/li&gt;
  &lt;li&gt;LSP: liskov substitution principle
    &lt;ul&gt;
      &lt;li&gt;Subclasses should be substitutable for their base classes.&lt;/li&gt;
      &lt;li&gt;best paradox for this is circle/ellipse dillema
        &lt;ul&gt;
          &lt;li&gt;designing circle to inherit from ellipse is fine&lt;/li&gt;
          &lt;li&gt;but users of this code will ruin everything when one wants to pass
ellipse-like args to a circle object! (think about foci)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;thus the contract of base class must be obeyed by the child class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;contract of a method consists of precondition and postcondtion&lt;/li&gt;
  &lt;li&gt;restating LSP in terms of contracts
    &lt;ul&gt;
      &lt;li&gt;derived class is substitutable for its base class if:
        &lt;ul&gt;
          &lt;li&gt;Its preconditions are no stronger than the base class method.&lt;/li&gt;
          &lt;li&gt;Its postconditions are no weaker than the base class method.&lt;/li&gt;
          &lt;li&gt;in other words, derived methods should expect no more and provide no less.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;violations of LSP are latent violations of OCP&lt;/li&gt;
  &lt;li&gt;DIP: dependency inversion principle
    &lt;ul&gt;
      &lt;li&gt;Depend upon Abstractions. Do not depend upon concretions.&lt;/li&gt;
      &lt;li&gt;If the OCP states the goal of OO architecture, the DIP states the primary
mechanism.&lt;/li&gt;
      &lt;li&gt;No dependency should target a concrete class.&lt;/li&gt;
      &lt;li&gt;concrete things change alot, abstract things change much less frequently&lt;/li&gt;
      &lt;li&gt;abstractions are “hinge points”, they represent the places where the design
can bend or be extended, without themselves being modified (OCP)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ISP: interface segregation principle. Many client specific interfaces are
better than one general purpose interface&lt;/li&gt;
  &lt;li&gt;PCP: package cohesion principles
    &lt;ul&gt;
      &lt;li&gt;REP: release reuse equivalency principle
        &lt;ul&gt;
          &lt;li&gt;The granule of reuse is the granule of release.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;CCP: common closure principle
        &lt;ul&gt;
          &lt;li&gt;Classes that change together, belong together.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;CRP: common reuse principle
        &lt;ul&gt;
          &lt;li&gt;Classes that aren’t reused together should not be grouped together.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;these three principles are mutually exclusive. All of them cannot be
simultaneously satisfied&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PCP: package coupling principles
    &lt;ul&gt;
      &lt;li&gt;ADP: acyclic dependencies principle
        &lt;ul&gt;
          &lt;li&gt;The dependencies betwen packages must not form cycles&lt;/li&gt;
          &lt;li&gt;Cycles can be broken in two ways. The first involves creating a new
package, and the second makes use of the DIP and ISP&lt;/li&gt;
          &lt;li&gt;Interfaces are very often included in the package that uses them, rather
than in the package that implements them.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SDP: stable dependencies principle
    &lt;ul&gt;
      &lt;li&gt;Depend in the direction of stability.&lt;/li&gt;
      &lt;li&gt;package stability measurement
        &lt;ul&gt;
          &lt;li&gt;Ca = Afferent Coupling. The number of classes outside the package that
depend upon classes inside the package. (i.e. incoming dependencies)&lt;/li&gt;
          &lt;li&gt;Ce = Efferent Coupling. The number of classes outside the package that
classes inside the package depend upon. (i.e. outgoing dependencies)&lt;/li&gt;
          &lt;li&gt;I = instability = Ce/(Ca+Ce)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Depend upon packages whose I metric is lower than yours&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SAP: stable abstractions principle
    &lt;ul&gt;
      &lt;li&gt;Stable packages should be abstract packages.&lt;/li&gt;
      &lt;li&gt;compose application from instable packages that are easy to change, and
stable packages that are easy to extend.&lt;/li&gt;
      &lt;li&gt;abstractness metric:
        &lt;ul&gt;
          &lt;li&gt;Nc = Number of classes in the package.&lt;/li&gt;
          &lt;li&gt;Na = Number of abstract classes in the package. Remember, an abstract
class is a class with at least one pure interface, and cannot be instantiated.&lt;/li&gt;
          &lt;li&gt;A Abstractness = Na / Nc&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;I should increase as A decreases&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;two zones in the IA graph
    &lt;ul&gt;
      &lt;li&gt;upper right corner = zone of uselessness = only abstract classes&lt;/li&gt;
      &lt;li&gt;lower left corner = zone of pain = lots of dependencies = only concrete
classes&lt;/li&gt;
      &lt;li&gt;maximizing distance between these two zones gives us a line called main
sequence&lt;/li&gt;
      &lt;li&gt;ideally our packages should sit on this line&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;distance metric
    &lt;ul&gt;
      &lt;li&gt;D = Distance from main sequence = |A+I-1|/sqrt(2). This ranges
from [0,~0.707].&lt;/li&gt;
      &lt;li&gt;D’ = Normalized Distance = |A+I-1|. This metric is much more convenient than
D since it ranges from [0,1]. Zero indicates that the package is directly on
the main sequence. One indicates that the package is as far away as possible
from the main sequence.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;design patterns = repeating structures of design and architecture&lt;/li&gt;
  &lt;li&gt;abstract server: when client depends directly on server DIP is violated. Thus
create an interface which client uses but server implements&lt;/li&gt;
  &lt;li&gt;adapter: delegator of methods from an abstract interface to the third party
server implementation&lt;/li&gt;
  &lt;li&gt;observer: when changes in one object needs to be informed to another without
each knowing much about the other&lt;/li&gt;
  &lt;li&gt;bridge: base and child classes are tightly coupled. This creates a strong
separation between interface and implementation&lt;/li&gt;
  &lt;li&gt;abstract factory: DIP strongly recommends that modules not depend upon
concrete classes. However, in order ot create an instance of a class, you must
depend upon the concrete class. This allows that dependency upon the concrete
class to exist in one, and only one, place.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">The Book This is a really concise article/chapter on software design principles and patterns by Robert C. Martin (commonly called Uncle Bob). The pdf version of this book/chapter is available here</summary></entry><entry><title type="html">Man’s search for meaning</title><link href="https://teju85.github.io/blog/2019/01/23/mans-search-for-meaning.html" rel="alternate" type="text/html" title="Man's search for meaning" /><published>2019-01-23T00:00:00+05:30</published><updated>2019-01-23T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/01/23/mans-search-for-meaning</id><content type="html" xml:base="https://teju85.github.io/blog/2019/01/23/mans-search-for-meaning.html">&lt;h3 id=&quot;the-book&quot;&gt;The Book&lt;/h3&gt;
&lt;p&gt;This is a phenomenal autobiographical account of Dr. Victor Frankl’s horrific
experience in concentration camps and his search of meaning for life amongst it.
The book is available
&lt;a href=&quot;https://www.amazon.com/Mans-Search-Meaning-Viktor-Frankl/dp/080701429X&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;h4 id=&quot;part-1---experiences-in-concentration-camps&quot;&gt;Part 1 - Experiences in concentration camps&lt;/h4&gt;
&lt;p&gt;Autobiographical account of author’s horrific experiences in concentration camps
during the Holocaust. By taking the success of this book as an example he says
that we shouldn’t chase success, but to completely forget about it and continue
to do what we love the most. This precisely will be the reason success will
follow us one day. He describes the life at these camps to be a constant
struggle for food and survival, constant struggle against being becoming a
Moslem (an inmate who can no more work), for those Moslems would be gassed to
death. He examines three phases of any inmate in these camps: period following
his admission, period where he is well entrenched in camp’s routine and period
following his release. He goes onto describe his account of each of these phases
very vividly in this part. Thus, this part is a much needed background for the
next coming parts of this book!&lt;/p&gt;

&lt;p&gt;Phase1 is almost always characterized by shock. It also comes with a ‘delusion
of reprieve’ (a child like optimism where one thinks he might fare well in
prison).&lt;/p&gt;

&lt;p&gt;Phase2 is relative apathy where one achieves kind of an emotional death. This
apathy would have been caused due to the horrors in the camp against fellow
inmates. It was a necessary way of self-defence, as life there was uncertain.
But no matter what the circumstances (beyond our control!) have robbed us of,
they can’t rob a man of one thing - the freedom to choose how to act in a given
scenario. Frankl argues that no matter how dire are circumstances, one must not
loose faith in one’s future and should have some gaol for their lives. ‘For a
man who knows the Why to live for can bear almost any How’ (quoting Nietzel).&lt;/p&gt;

&lt;p&gt;Phase3 is hte psyche of the inmates after their release. Most take a long time
to be brought back to the mainstream of society. Initial few days were all about
de-personalization - disbelief about their dreams to have turned true. Some
people with primitive nature became ever more aggressive and ruthless after
their release. People also suffered from bitterness due to their home town folks
unable to acknowledge their suffering. They were also disillusioned in the sense
that they had thought after all these sufferings there’d be no more of it.&lt;/p&gt;

&lt;h4 id=&quot;part-2---logotherapy-in-a-nutshell&quot;&gt;Part 2 - Logotherapy in a nutshell&lt;/h4&gt;
&lt;p&gt;Logos in greek means meaning. As opposed to Freudean ‘will to pleasure’ and
Adlerian ‘will to power’ psychoanalytical methods, logotheraphy deals with the
‘will to meaning’. A man’s search for meaning for his life is the primary
motivation.&lt;/p&gt;

&lt;p&gt;Not every conflict in us is neurotic and needs psychoanalysis. We must not
strive towards a tensionless mind, for mind is always in tension between what
has been achieved by that man so far and what still needs to be achieved (aka
neuro-dynamics).&lt;/p&gt;

&lt;p&gt;Existential vaccum - total lack of awareness of meaning for one’s life. This is
very wide spread in our generation because of progressive automation and it
causing too much leisure on people’s hands. It almost always manifests itself in
a state of boredom.&lt;/p&gt;

&lt;p&gt;Meaning of life is very unique to a person. Thus, in order to find this out, one
needs to reverse the thought process and ask what is being asked of oneself in
their life, that which he alone is responsible for.&lt;/p&gt;

&lt;p&gt;We can realize the meaning of our lives via: doing a work, experiencing someone
or something and attitude we take towards difficult times or suffering.&lt;/p&gt;

&lt;p&gt;Logos is deeper than logic. Everyone has the freedom to choose his actions or
responses to the circumstances we face daily. However, this freedom shouldn’t
lead to arbitrariness, but to responsibleness. We have people who act as swines
while others act as saints. Such mix of people are found in all races of
humanity. Man has both these potentialities and what he becomes is more based on
his choice than on circumstances.&lt;/p&gt;

&lt;h4 id=&quot;part-3---the-case-for-tragic-optimism&quot;&gt;Part 3 - The case for tragic optimism&lt;/h4&gt;
&lt;p&gt;Tragic optimism - being optimistic even while facing the trafic triads: pain,
guilt and death. And optimism, like happiness, cannot be pursued but ensued.&lt;/p&gt;

&lt;p&gt;Existential vaccum also results in depression, aggression and addition.&lt;/p&gt;

&lt;p&gt;Suffering is not the only way to finding meaning, for if it is avoidable, the
smart thing to do is to remove its cause. Unnecessary suffering is masochistic
not herioc.&lt;/p&gt;

&lt;p&gt;Live as if you’re living for the second time and had acted as wrongly as you’re
about to act now. Because, since Auschwitz, we know what man is capable of and
since Nagashima, we know what is at stake!&lt;/p&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">The Book This is a phenomenal autobiographical account of Dr. Victor Frankl’s horrific experience in concentration camps and his search of meaning for life amongst it. The book is available here.</summary></entry><entry><title type="html">How to be a leader</title><link href="https://teju85.github.io/blog/2019/01/15/how-to-be-a-leader.html" rel="alternate" type="text/html" title="How to be a leader" /><published>2019-01-15T00:00:00+05:30</published><updated>2019-01-15T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/01/15/how-to-be-a-leader</id><content type="html" xml:base="https://teju85.github.io/blog/2019/01/15/how-to-be-a-leader.html">&lt;h3 id=&quot;the-book&quot;&gt;The Book&lt;/h3&gt;
&lt;p&gt;This book is a collection of 50 sayings from the nine-volumes of
&lt;em&gt;Complete works of Swami Vivekananda&lt;/em&gt;. The book is available
&lt;a href=&quot;https://istore.chennaimath.org/product/how-to-be-a-leader/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Here are a few of the sayings that I liked the most from this booklet:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Followers will only follow those leaders who are ready to give up their life
for the cause.&lt;/li&gt;
  &lt;li&gt;If you can’t learn to obey, you cannot lead.&lt;/li&gt;
  &lt;li&gt;Great things are only done through great sacrifices.&lt;/li&gt;
  &lt;li&gt;Know that talking ill of others in private is a sin.&lt;/li&gt;
  &lt;li&gt;It is criticizing each other that is the root of all mischief.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">The Book This book is a collection of 50 sayings from the nine-volumes of Complete works of Swami Vivekananda. The book is available here.</summary></entry></feed>