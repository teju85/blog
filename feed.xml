<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://teju85.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://teju85.github.io/blog/" rel="alternate" type="text/html" /><updated>2019-09-03T14:07:23+05:30</updated><id>https://teju85.github.io/blog/feed.xml</id><title type="html">Quagmire</title><subtitle>Stuff I find cool/useful</subtitle><entry><title type="html">Writing a 3x3 sudoku solver in C++</title><link href="https://teju85.github.io/blog/2019/08/23/solving-sudoku.html" rel="alternate" type="text/html" title="Writing a 3x3 sudoku solver in C++" /><published>2019-08-23T00:00:00+05:30</published><updated>2019-08-23T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/08/23/solving-sudoku</id><content type="html" xml:base="https://teju85.github.io/blog/2019/08/23/solving-sudoku.html">&lt;p&gt;&lt;a href=&quot;https://gist.github.com/teju85/2cfc3934f3697aaff324b77e693010a0&quot;&gt;Here&lt;/a&gt; is a
short c++ code to solve the popular 3x3 sudoku puzzle. Follow the instructions
at the top of the source file to compile and run the code. It only uses the
logical elimination-based method to converge to the right solution. This appears
to solve even the “hard” problems from &lt;a href=&quot;https://websudoku.com&quot;&gt;websudoku&lt;/a&gt; portal.&lt;/p&gt;</content><author><name></name></author><category term="cpp" /><category term="puzzles" /><summary type="html">Here is a short c++ code to solve the popular 3x3 sudoku puzzle. Follow the instructions at the top of the source file to compile and run the code. It only uses the logical elimination-based method to converge to the right solution. This appears to solve even the “hard” problems from websudoku portal.</summary></entry><entry><title type="html">Handling of enum overflows in C/C++</title><link href="https://teju85.github.io/blog/2019/08/21/enums.html" rel="alternate" type="text/html" title="Handling of enum overflows in C/C++" /><published>2019-08-21T00:00:00+05:30</published><updated>2019-08-21T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/08/21/enums</id><content type="html" xml:base="https://teju85.github.io/blog/2019/08/21/enums.html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Save the below code in a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;enum.c&lt;/code&gt; and try to compile it using the
following command: &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc enum.c -o enum &amp;amp;&amp;amp; ./enum&lt;/code&gt;. This will give the following
error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;enum.c:8:3: error: overflow in enumeration values
   _4
   ^
enum.c: In function ‘main’:
enum.c:11:48: error: ‘FourBytes’ undeclared (first use in this function)
   printf(&quot;sizeof(FourBytes)=%d\n&quot;, (int)sizeof(FourBytes));
                                                ^
enum.c:11:48: note: each undeclared identifier is reported only once for each function it appears in
enum.c:12:49: error: ‘EightBytes’ undeclared (first use in this function)
   printf(&quot;sizeof(EightBytes)=%d\n&quot;, (int)sizeof(EightBytes));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if you save this same code as &lt;code class=&quot;highlighter-rouge&quot;&gt;enum.cpp&lt;/code&gt; and compile it as:
&lt;code class=&quot;highlighter-rouge&quot;&gt;g++ enum.cpp -o enum &amp;amp;&amp;amp; ./enum&lt;/code&gt;. This will compile successfully and gives the
following output!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sizeof(FourBytes)=4
sizeof(EightBytes)=8&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yes! The C++ compiler automatically takes care of overflows by ‘upgrading’ the
enum to be of 8 bytes!&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FourBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EightBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sizeof(FourBytes)=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FourBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sizeof(EightBytes)=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EightBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="c" /><category term="cpp" /><summary type="html">Introduction Save the below code in a file named enum.c and try to compile it using the following command: gcc enum.c -o enum &amp;amp;&amp;amp; ./enum. This will give the following error: enum.c:8:3: error: overflow in enumeration values _4 ^ enum.c: In function ‘main’: enum.c:11:48: error: ‘FourBytes’ undeclared (first use in this function) printf(&quot;sizeof(FourBytes)=%d\n&quot;, (int)sizeof(FourBytes)); ^ enum.c:11:48: note: each undeclared identifier is reported only once for each function it appears in enum.c:12:49: error: ‘EightBytes’ undeclared (first use in this function) printf(&quot;sizeof(EightBytes)=%d\n&quot;, (int)sizeof(EightBytes));</summary></entry><entry><title type="html">Teditor v1.3.0</title><link href="https://teju85.github.io/blog/2019/08/11/teditor.html" rel="alternate" type="text/html" title="Teditor v1.3.0" /><published>2019-08-11T00:00:00+05:30</published><updated>2019-08-11T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/08/11/teditor</id><content type="html" xml:base="https://teju85.github.io/blog/2019/08/11/teditor.html">&lt;h3 id=&quot;teditor-v130&quot;&gt;Teditor v1.3.0!&lt;/h3&gt;
&lt;p&gt;Glad to announce the release of the next version of teditor: v1.3.0. It
can be found &lt;a href=&quot;https://github.com/teju85/teditor/releases/tag/1.3.0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;
&lt;p&gt;Changes/features in this release:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Adds support for ledger-like text file based syntax for personal finanace
accounting.&lt;/li&gt;
  &lt;li&gt;Reintroduces proper kill-line command based on the new undo/redo stack.&lt;/li&gt;
  &lt;li&gt;More unittests improve coverage&lt;/li&gt;
  &lt;li&gt;Bug fixes to the undo/redo for insert-char command.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ledger-mode&quot;&gt;Ledger Mode&lt;/h3&gt;
&lt;p&gt;To start using this for tracking your personal finances:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;ledger.lg&lt;/code&gt; inside your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.teditor&lt;/code&gt; folder. (one can
also create such a file elsewhere and then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-ledger-file&lt;/code&gt; option)&lt;/li&gt;
  &lt;li&gt;Refer to the file &lt;code class=&quot;highlighter-rouge&quot;&gt;samples/ledger/sample.lg&lt;/code&gt; to know its syntax. It is very
simplified version of the &lt;a href=&quot;https://www.ledger-cli.org/&quot;&gt;ledger-cli&lt;/a&gt; syntax.&lt;/li&gt;
  &lt;li&gt;Once you have this file populated with information, get back to the teditor
window and press &lt;code class=&quot;highlighter-rouge&quot;&gt;C-l C-d&lt;/code&gt; in order to see the summary of your transactions.&lt;/li&gt;
  &lt;li&gt;By default, it shows a summary report of all transactions grouped under the
top-level accounts. Press &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; to show them for all accounts.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="teditor" /><summary type="html">Teditor v1.3.0! Glad to announce the release of the next version of teditor: v1.3.0. It can be found here.</summary></entry><entry><title type="html">Teditor v1.2.0</title><link href="https://teju85.github.io/blog/2019/08/07/teditor.html" rel="alternate" type="text/html" title="Teditor v1.2.0" /><published>2019-08-07T00:00:00+05:30</published><updated>2019-08-07T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/08/07/teditor</id><content type="html" xml:base="https://teju85.github.io/blog/2019/08/07/teditor.html">&lt;h3 id=&quot;teditor-v120&quot;&gt;Teditor v1.2.0!&lt;/h3&gt;
&lt;p&gt;Glad to announce the release of the next version of teditor: v1.2.0. It
can be found &lt;a href=&quot;https://github.com/teju85/teditor/releases/tag/1.2.0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;
&lt;p&gt;Changes/features in this release:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Various fixes to the bugs in draw calls of the main window&lt;/li&gt;
  &lt;li&gt;Proper resizing now handled directly by Windows class, out of Buffer class&lt;/li&gt;
  &lt;li&gt;Full support for a vertical window split&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="teditor" /><summary type="html">Teditor v1.2.0! Glad to announce the release of the next version of teditor: v1.2.0. It can be found here.</summary></entry><entry><title type="html">Teditor v1.1.0</title><link href="https://teju85.github.io/blog/2019/08/06/teditor.html" rel="alternate" type="text/html" title="Teditor v1.1.0" /><published>2019-08-06T00:00:00+05:30</published><updated>2019-08-06T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/08/06/teditor</id><content type="html" xml:base="https://teju85.github.io/blog/2019/08/06/teditor.html">&lt;h3 id=&quot;teditor-v110&quot;&gt;Teditor v1.1.0!&lt;/h3&gt;
&lt;p&gt;Glad to announce the release of the next version of teditor: v1.1.0. It
can be found &lt;a href=&quot;https://github.com/teju85/teditor/releases/tag/1.1.0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;
&lt;p&gt;Changes/features in this release:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Initial set of code changes for an upcoming multiple windows support.&lt;/li&gt;
  &lt;li&gt;Proper wrapper for tree-sitter (soon to be used for code tree traversals)&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="teditor" /><summary type="html">Teditor v1.1.0! Glad to announce the release of the next version of teditor: v1.1.0. It can be found here.</summary></entry><entry><title type="html">Installing Ubuntu 19.04 Server on desktop with Nvidia GPUs</title><link href="https://teju85.github.io/blog/2019/08/01/ubuntu-server.html" rel="alternate" type="text/html" title="Installing Ubuntu 19.04 Server on desktop with Nvidia GPUs" /><published>2019-08-01T00:00:00+05:30</published><updated>2019-08-01T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/08/01/ubuntu-server</id><content type="html" xml:base="https://teju85.github.io/blog/2019/08/01/ubuntu-server.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Notes based on my experience installing and setting up a desktop machine to run
Ubuntu 19.04 server.&lt;/p&gt;

&lt;h2 id=&quot;installing-ubuntu&quot;&gt;Installing Ubuntu&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Download iso from &lt;a href=&quot;https://ubuntu.com/download/server&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download unetbootin from &lt;a href=&quot;https://unetbootin.github.io/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Have an empty ~4GB USB pen drive&lt;/li&gt;
  &lt;li&gt;Use unetbootin to flash the above iso into this usb drive&lt;/li&gt;
  &lt;li&gt;Boot via this usb drive on your desktop&lt;/li&gt;
  &lt;li&gt;In boot menu select ‘Install Ubuntu …’&lt;/li&gt;
  &lt;li&gt;Follow the instructions on screen&lt;/li&gt;
  &lt;li&gt;Don’t forget to select “Install OpenSSH”, if you want remote access&lt;/li&gt;
  &lt;li&gt;Select to upgrade and install ubuntu (optional)&lt;/li&gt;
  &lt;li&gt;Provide hostname, username and credentials&lt;/li&gt;
  &lt;li&gt;Wait until finished!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setting-up&quot;&gt;Setting up&lt;/h2&gt;
&lt;h3 id=&quot;basics&quot;&gt;Basics&lt;/h3&gt;
&lt;p&gt;My personal preference is to use python3. So, I just remove python2.7.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt remove python2.7 python python2.7-minimal
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt purge python2.7 python python2.7-minimal
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt autoremove
&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/bin/python3 /usr/bin/python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some essentials:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;curl g++ gcc git make tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker&quot;&gt;docker&lt;/h3&gt;
&lt;p&gt;Following steps will let you run docker commands without &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://get.docker.com/ | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;groupadd docker
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
newgrp docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nvidia-driver&quot;&gt;nvidia driver&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Make sure card is getting detected: &lt;code class=&quot;highlighter-rouge&quot;&gt;lspci | grep -i nv&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Install kernel headers: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install linux-headers-$(uname -r)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Download toolkit installer: &lt;code class=&quot;highlighter-rouge&quot;&gt;wget https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.168_418.67_linux.run&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install only the driver: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo sh cuda_10.1.168_418.67_linux.run --driver&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Disable nouveau driver: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo sh -c &quot;echo blacklist nouveau &amp;gt; /etc/modprobe.d/blacklist-nouveau.conf &amp;amp;&amp;amp; echo options nouveau modeset=0 &amp;gt;&amp;gt; /etc/modprobe.d/blacklist-nouveau.conf &amp;amp;&amp;amp; update-initramfs -u &amp;amp;&amp;amp; reboot&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nvidia-smi&lt;/code&gt; should now run successfully.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;nvidia-docker&quot;&gt;nvidia-docker&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://nvidia.github.io/nvidia-docker/gpgkey | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class=&quot;c&quot;&gt;# this is because 19.04 is not yet supported, at the time of this writing&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# thus, force fallback on 18.04 version's release&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# that seems to be working fine&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#distribution=$(. /etc/os-release;echo $ID$VERSION_ID)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;18.04
curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://nvidia.github.io/nvidia-docker/&lt;span class=&quot;nv&quot;&gt;$distribution&lt;/span&gt;/nvidia-docker.list | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/nvidia-docker.list
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nvidia-docker2
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pkill &lt;span class=&quot;nt&quot;&gt;-SIGHUP&lt;/span&gt; dockerd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="linux" /><summary type="html">Introduction Notes based on my experience installing and setting up a desktop machine to run Ubuntu 19.04 server.</summary></entry><entry><title type="html">Resolving ADB unauthorized issue</title><link href="https://teju85.github.io/blog/2019/07/09/adb-unauthorized.html" rel="alternate" type="text/html" title="Resolving ADB unauthorized issue" /><published>2019-07-09T00:00:00+05:30</published><updated>2019-07-09T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/07/09/adb-unauthorized</id><content type="html" xml:base="https://teju85.github.io/blog/2019/07/09/adb-unauthorized.html">&lt;h3 id=&quot;issue&quot;&gt;Issue&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ANDROID_SDK_HOME&lt;/span&gt;/platform-tools
adb devices
List of devices attached
fffffffffffffff        unauthorized
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One would see the ‘unauthorized’ keyword in the place of the device name.
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell&lt;/code&gt; would also fail stating something about ‘keys not set’.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Unplug your android device from the computer, if it is connected&lt;/li&gt;
  &lt;li&gt;Inside your computer:
    &lt;ul&gt;
      &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;$ANDROID_SDK_HOME/platform-tools&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;adb keygen .android/adb_key&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Open your android device&lt;/li&gt;
  &lt;li&gt;Go to Settings -&amp;gt; Developer Options&lt;/li&gt;
  &lt;li&gt;Touch ‘Revoke USB debugging authorizations’&lt;/li&gt;
  &lt;li&gt;Plug the device back into the computer&lt;/li&gt;
  &lt;li&gt;The device should now ask you for whether to trust this computer. Say yes.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="android" /><summary type="html">Issue cd $ANDROID_SDK_HOME/platform-tools adb devices List of devices attached fffffffffffffff unauthorized One would see the ‘unauthorized’ keyword in the place of the device name. adb shell would also fail stating something about ‘keys not set’.</summary></entry><entry><title type="html">Yoga, Meditation and Japa Sadhana</title><link href="https://teju85.github.io/blog/2019/05/02/yoga-and-japa-sadhana.html" rel="alternate" type="text/html" title="Yoga, Meditation and Japa Sadhana" /><published>2019-05-02T00:00:00+05:30</published><updated>2019-05-02T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/05/02/yoga-and-japa-sadhana</id><content type="html" xml:base="https://teju85.github.io/blog/2019/05/02/yoga-and-japa-sadhana.html">&lt;h3 id=&quot;yoga-meditation-and-japa-sadhana&quot;&gt;Yoga, Meditation and Japa Sadhana&lt;/h3&gt;
&lt;p&gt;This book by Swami Krishnananda can be found &lt;a href=&quot;https://www.swami-krishnananda.org/ymj/Yoga_Meditation_and_Japa_Sadhana.pdf&quot;&gt;here&lt;/a&gt;.
Swami Krishnananda introduces us to the concepts of yoga, meditation and japa
sadhana starting from the basic concept of consciousness. I feel like this is an
ideal read for someone starting along the spiritual practice (sadhana).&lt;/p&gt;

&lt;h3 id=&quot;summary-part-i&quot;&gt;Summary Part I&lt;/h3&gt;
&lt;h4 id=&quot;yoga-and-meditation&quot;&gt;Yoga and Meditation&lt;/h4&gt;
&lt;p&gt;Yoga is a system of harmony. Yoga is stability of personality, equilibrium of
consciousness and harmony in all walks of life. Harmony is adjustment of oneself
with ones external.&lt;/p&gt;

&lt;p&gt;When you say ‘I’, you are not referring to your limbs, stomach or other parts of
your body. You are referring to your conscious and spiritual being. You are
essentially consciousness that animates this body. Similarly, the concept of
Virat Purusha (Cosmic Being) as mentioned in Vedas, pertains to the consciousness
of the cosmos itself. We, humans, are integral part of this cosmos, vitaly
related. Thus, our actions affect the whole cosmos, just like any malfunctioning
of any part of our body affects the whole body’s function itself. Extending this
consciousness to the whole world is what the apex of meditation is and this is
what is Yogic Contemplation. God is just the name given to this “world-individual”.
This all-encompassing consciousness is what is termed by Vedas as Parama-Purusha
(Supreme Being). Being vitaly related to this universe, this means that our
salvation lies in being friendly with the universe as a whole.&lt;/p&gt;

&lt;p&gt;Our mind jumps from one object to another. It is usually not trained to perceive
Consciousness. Bringing our minds to be aware of the Consciousness that animates
this universe is termed as meditation.&lt;/p&gt;

&lt;h4 id=&quot;practical-techniques&quot;&gt;Practical Techniques&lt;/h4&gt;
&lt;p&gt;Harmony comes in various grades:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You should be harmonious in your relationship with other people in the world.&lt;/li&gt;
  &lt;li&gt;You must be harmonious within your own personality.&lt;/li&gt;
  &lt;li&gt;You must have harmony of muscles and nervous system.&lt;/li&gt;
  &lt;li&gt;Bring the breathing process (prana) into harmony.&lt;/li&gt;
  &lt;li&gt;Control of the activity of the senses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the prana is calm (via pranayama), the mind is calm, our senses do not ask
for tempting objects, one is ready for concentration and meditation. This is real
yoga.&lt;/p&gt;

&lt;p&gt;Concentration is of 3 forms:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Concentration on external points - the aim here is to train the mind to think
of only one external object by concentrating on it.&lt;/li&gt;
  &lt;li&gt;Concentration on internal points - by concentrating on certain centers (chakras)
of our body.&lt;/li&gt;
  &lt;li&gt;Concentration on the universal - by meditating upon the consciousness prevailing
this universe itself. For eg: by chanting OM.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;day-to-day-practice&quot;&gt;Day-to-day practice&lt;/h4&gt;
&lt;p&gt;Sadhana has 3 prongs:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A daily routine of practice - have a fixed routine and be disciplined at it.
There should be 3 items in this:
  a. Japa - chanting a mantra to maintain the same consciousness
  b. Study - reading scriptures or texts
  c. Meditation - should be done at the same time, at the same place, in the same
direction, by sitting in the same asana daily.&lt;/li&gt;
  &lt;li&gt;An annual resolve - vow to give up one bad habit. If this resolution gets broken
fast on that day.&lt;/li&gt;
  &lt;li&gt;A spiritual diary - at the end of the day review what you have done today.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;summary-part-ii&quot;&gt;Summary Part II&lt;/h3&gt;
&lt;h4 id=&quot;japa-sadhana&quot;&gt;Japa Sadhana&lt;/h4&gt;
&lt;p&gt;World of experience has 3 inter-connected factors: thought, name and form. Of the
8 known forms of yoga, Japa Yoga is considered to be the most efficacious approach
to God. In Vedic system, name and form have tight relation wherein a particular
name automatically projects a certain form in our minds (not so true in our modern
societies!). They also are related to the thought behind the expression of them.
Sadhana, in this sense, is to evoke a particular form in our minds which rouses
in us a higher degree of truth than the one in which we are currently placed in,
until we reach the ultimate truth, the Ishvara. Patanjali Maharshi terms Japa as
the recitation of a particular name/mantra alongwhile contemplating on its
meaning.&lt;/p&gt;

&lt;p&gt;The recitation of a mantra/name-of-god, helps us reveal the sattva guna (quality)
in us. Inertia, distraction and equilibrium are termed as tamas, rajas and sattva
gunas, respectively.&lt;/p&gt;

&lt;p&gt;Japa involves 3 important shaktis (powers):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;mantra-shakti - power hidden in the juxtaposition of the letters of the formula&lt;/li&gt;
  &lt;li&gt;devata-shakti - power of inherence of a higher principle in the mantra&lt;/li&gt;
  &lt;li&gt;sadhana-shakti - power within oneself&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Prayers can work wonders in this manner too! The prayer we offer through mantra
sadhana or japa are converted into impersonal force, which is the power of God,
and the miracle is worked by God himself. Prayers are powers.&lt;/p&gt;

&lt;p&gt;With japa sadhana we attune our inner pysche with the Ishvara-Shakti (Divine Will).&lt;/p&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">Yoga, Meditation and Japa Sadhana This book by Swami Krishnananda can be found here. Swami Krishnananda introduces us to the concepts of yoga, meditation and japa sadhana starting from the basic concept of consciousness. I feel like this is an ideal read for someone starting along the spiritual practice (sadhana).</summary></entry><entry><title type="html">Pragmatic Programmer</title><link href="https://teju85.github.io/blog/2019/02/17/pragmatic-programmer.html" rel="alternate" type="text/html" title="Pragmatic Programmer" /><published>2019-02-17T00:00:00+05:30</published><updated>2019-02-17T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/02/17/pragmatic-programmer</id><content type="html" xml:base="https://teju85.github.io/blog/2019/02/17/pragmatic-programmer.html">&lt;h3 id=&quot;pragmatic-programmer&quot;&gt;Pragmatic Programmer&lt;/h3&gt;
&lt;p&gt;“Pragmatic Programmer - from journeyman to master” is a book on programming
written by Andrew Hunt and David Thomas. This book can be found
&lt;a href=&quot;https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;here&lt;/a&gt;.
IMO, every programmer who codes for living should read this in order to understand
how to convert requirements to specifications to a flexible and maintainable code.
One message that stands out from this book is “You shouldn’t be wedded to any
particular technology, but have a broad enough background and experience base to
allow you to choose good solutions in particular situations.”&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;h4 id=&quot;naming&quot;&gt;Naming&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use intention revealing names&lt;/li&gt;
  &lt;li&gt;Avoid ambiguous variable names&lt;/li&gt;
  &lt;li&gt;Use pronounceable names&lt;/li&gt;
  &lt;li&gt;Class names must be nouns&lt;/li&gt;
  &lt;li&gt;Method names must be verbs&lt;/li&gt;
  &lt;li&gt;Choose a consistent style and stick to it!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;comments&quot;&gt;Comments&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Comments Lie!&lt;/li&gt;
  &lt;li&gt;Avoid them as much as possible&lt;/li&gt;
  &lt;li&gt;Don’t keep commented code. Delete it!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;data-structures&quot;&gt;Data Structures&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t blindly add getters and setters&lt;/li&gt;
  &lt;li&gt;Objects and data structures are anti-symmetric!&lt;/li&gt;
  &lt;li&gt;Avoid creating hybrid of these two!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use exceptions rather than error codes&lt;/li&gt;
  &lt;li&gt;Provide meaningful messages with the exceptions thrown&lt;/li&gt;
  &lt;li&gt;Create exception classes based on the needs of the caller&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tdd&quot;&gt;TDD&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Write tests first, code later!&lt;/li&gt;
  &lt;li&gt;Test code is as important as production code&lt;/li&gt;
  &lt;li&gt;When in doubt follow the above rule!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;classes&quot;&gt;Classes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Should follow SRP&lt;/li&gt;
  &lt;li&gt;Should follow OCP&lt;/li&gt;
  &lt;li&gt;Should follow DIP&lt;/li&gt;
  &lt;li&gt;When classes lose cohesion, split them&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;systems&quot;&gt;Systems&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Construction of a system must be separated from its use&lt;/li&gt;
  &lt;li&gt;One such mechanism is Dependency Injection&lt;/li&gt;
  &lt;li&gt;Use the simplest thing that can possibly work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;functions&quot;&gt;Functions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Must be small&lt;/li&gt;
  &lt;li&gt;Must do only one thing&lt;/li&gt;
  &lt;li&gt;Use descriptive names&lt;/li&gt;
  &lt;li&gt;Have less number of input arguments&lt;/li&gt;
  &lt;li&gt;Have no side effects&lt;/li&gt;
  &lt;li&gt;Try to avoid output arguments&lt;/li&gt;
  &lt;li&gt;Always follow command-query-separation&lt;/li&gt;
  &lt;li&gt;Prefer exceptions to returning error codes&lt;/li&gt;
  &lt;li&gt;Don’t Repeat Yourself (DRY)!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;formatting&quot;&gt;Formatting&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Small source files preferable over large ones&lt;/li&gt;
  &lt;li&gt;Use vertical blank lines for visual cues&lt;/li&gt;
  &lt;li&gt;Concepts closely related must be vertically closer&lt;/li&gt;
  &lt;li&gt;This is just like paragraphs&lt;/li&gt;
  &lt;li&gt;Keep all instance variables at one place&lt;/li&gt;
  &lt;li&gt;Keep the lines short&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;boundaries&quot;&gt;Boundaries&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;User learning-tests to understand third party APIs&lt;/li&gt;
  &lt;li&gt;Isolate boundaries through wrapping them inside our own class&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;emergence&quot;&gt;Emergence&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Four rules of simple design:&lt;/li&gt;
  &lt;li&gt;Runs all tests&lt;/li&gt;
  &lt;li&gt;Contains no duplication&lt;/li&gt;
  &lt;li&gt;Expresses programmer’s intent&lt;/li&gt;
  &lt;li&gt;Minimum number of classes and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Try to avoid sharing data&lt;/li&gt;
  &lt;li&gt;Keep the concurrent code separate&lt;/li&gt;
  &lt;li&gt;Avoid using more than one method on shared object&lt;/li&gt;
  &lt;li&gt;Keep your synchronized sections as small as possible&lt;/li&gt;
  &lt;li&gt;Treat spurious failures as candidate threading issues&lt;/li&gt;
  &lt;li&gt;Get your non-threaded code working first&lt;/li&gt;
  &lt;li&gt;It is better when broken code fails as early as possible&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">Pragmatic Programmer “Pragmatic Programmer - from journeyman to master” is a book on programming written by Andrew Hunt and David Thomas. This book can be found here. IMO, every programmer who codes for living should read this in order to understand how to convert requirements to specifications to a flexible and maintainable code. One message that stands out from this book is “You shouldn’t be wedded to any particular technology, but have a broad enough background and experience base to allow you to choose good solutions in particular situations.”</summary></entry><entry><title type="html">Checklist Manifesto: How to get Things Right</title><link href="https://teju85.github.io/blog/2019/02/01/checklist-manifesto.html" rel="alternate" type="text/html" title="Checklist Manifesto: How to get Things Right" /><published>2019-02-01T00:00:00+05:30</published><updated>2019-02-01T00:00:00+05:30</updated><id>https://teju85.github.io/blog/2019/02/01/checklist-manifesto</id><content type="html" xml:base="https://teju85.github.io/blog/2019/02/01/checklist-manifesto.html">&lt;h3 id=&quot;what-to-trust-in-a-post-truth-world&quot;&gt;What to trust in a ‘post-truth’ world&lt;/h3&gt;
&lt;p&gt;By Dr. Atul Gawande. This book can be found &lt;a href=&quot;https://www.amazon.com/Checklist-Manifesto-How-Things-Right/dp/0312430000&quot;&gt;here&lt;/a&gt;.
Dr. Atul shows the benefits of a simple checklist against the complexity of
our lives.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Three types of failures:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Task itself is impossible&lt;/li&gt;
  &lt;li&gt;failure due to ignorance&lt;/li&gt;
  &lt;li&gt;failure due to ineptitude&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;problem-of-extreme-complexity&quot;&gt;Problem of extreme complexity&lt;/h4&gt;
&lt;p&gt;We are living in a world of super specialization. Even then there are mistakes
committed due to extremely complex procedures and scenarios, especially in
medicine.&lt;/p&gt;

&lt;h4 id=&quot;the-checklist&quot;&gt;The checklist&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;our world/fields today have become too complex to be put into our memory&lt;/li&gt;
  &lt;li&gt;example of WWII Boeing model 299 plane: Too complex for one pilot. But with a
simple checklist the pilots were able to fly without accident&lt;/li&gt;
  &lt;li&gt;two ways one fails in a complex environment: failure to remember steps - its
easy to miss mundane steps when there are more pressing events at hand. Easy
to convince ourselves to skip a simple step&lt;/li&gt;
  &lt;li&gt;checklists are a way to discipline ourselves into following these steps&lt;/li&gt;
  &lt;li&gt;they also help in our memory recall especially while under pressure&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;end-of-the-master-builder&quot;&gt;End of the master builder&lt;/h4&gt;
&lt;p&gt;Checklists are a cognitive net against our inherent flaws in memory, attention
and thoroughness. 3 types of problems:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;simple: Like preparing a dish. Once a recipe is prepared that’s good enough&lt;/li&gt;
  &lt;li&gt;complicated: Like building rocket. Can be broken down into series of simple
problems. But there are unforeseen issues even for the experienced.&lt;/li&gt;
  &lt;li&gt;complex: Like raising a child. Experience in raising one’s child well may not
guarantee success with another. There’s no recipe!&lt;/li&gt;
  &lt;li&gt;master builder era is long gone. The complexity in today’s world is too much
for one guy to manage and track. The idea is to have experts in multiple
sub-specializations manage individual problems. But the crucial aspect is
that those experts need to get together to resolve any unexpected scenarios
or issues that span across multiple specializations. Man is fallible not men
less so! Fine example to this is the construction industry&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;the-idea&quot;&gt;The idea&lt;/h4&gt;
&lt;p&gt;In case of routine tasks and problems, we need a central authority who dictates
what needs to be done to their subordinates. In case of complex, unforeseen
circumstances, this power needs to be as far away from the center as possible.
Best example was 2005’s Katrina hurricane. Where government wasn’t still sure
who should provide help to stranded citizens, Walmart had supplied loads of help
already. This worked because Walmart decentralized the power away from center to
the local employees in wake of this incident. Under very complex scenarios
decentralization of power is the right approach. Under cases of extreme
complexity, which is behind anyone persons’ capacity, we need to decentralize
power and distribute it to respective front-lines.&lt;/p&gt;

&lt;h4 id=&quot;the-first-try&quot;&gt;The first try&lt;/h4&gt;
&lt;p&gt;The author recounts his experience while consulting for WHO regarding surgical
safety procedures world wide. Describes various hospitals trying to implement
checklists during surgery. And the importance of communication between the OR
group. The author tries to give such a checklist a try in his own hospital. Also
mentions a peculiar (yet intuitive) study where just by knowing the names of the
members in a group increased the communication in it. But because of ambiguities
and the length of the checklist, they had to stop using it!&lt;/p&gt;

&lt;h4 id=&quot;the-checklist-factory&quot;&gt;The checklist factory&lt;/h4&gt;
&lt;p&gt;There are 2 kinds of checklists:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;bad ones - very long, detailed, treat people as dumb and list out every steps&lt;/li&gt;
  &lt;li&gt;good ones - very short and precise, only list the most critical steps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But checklists can’t make people to follow them!&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;READ-DO checklist - people read items off the checklist, execute them and
then tick them off&lt;/li&gt;
  &lt;li&gt;DO-CONFIRM checklist - everyone executes a few steps from their memory and
then pauses to confirm whether all items from the list have been executed or
not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A good checklist typically contains about 5 to 9 items. Most importantly the
checklist should be tested out in real world, at least once, before deploying it
widely!!&lt;/p&gt;

&lt;h4 id=&quot;the-test&quot;&gt;The test&lt;/h4&gt;
&lt;p&gt;Keeping the list minimal is the biggest challenge:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;prune too many items, checklist could be too short to be effective in
preventing errors&lt;/li&gt;
  &lt;li&gt;keep too many items, people hate to follow long lists&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There’s a delicate balance between brevity and effectiveness&lt;/p&gt;

&lt;h4 id=&quot;hero-in-the-age-of-checklists&quot;&gt;Hero in the age of checklists&lt;/h4&gt;
&lt;p&gt;Its just not about ticking-off items in checklist, it is about teamwork. Even
these checklists have found to be very useful in other fields like investing.
But very few have become the fan of checklists, despite their proven checklists!
We still think that people who follow their intuition are heroes and are real
men!&lt;/p&gt;

&lt;p&gt;The fear people have on checklists is rigidity:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;they think checklists will make them mindless automatons&lt;/li&gt;
  &lt;li&gt;but in reality its the opposite!&lt;/li&gt;
  &lt;li&gt;checklists take the routine (but important) stuffs off the brain’s working
memory&lt;/li&gt;
  &lt;li&gt;thus checklists will enable us in our fields&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Heroes in today’s world are those who&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;know when to improvise and when not to&lt;/li&gt;
  &lt;li&gt;understand the importance of teamwork&lt;/li&gt;
  &lt;li&gt;know how to work in today’s complex environments&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Checklists must aid, not hinder. We are meant to be for excitement and novelty.
Never to give attention to details and be disciplined. That’s where checklists
come to help us. Under the complexity of today’s world we have nothing else left
but to try checklists!&lt;/p&gt;

&lt;h4 id=&quot;the-save&quot;&gt;The save&lt;/h4&gt;
&lt;p&gt;Interesting story of an operation where the author accidentally tore the
patient’s vena-cava. But due to checklist they followed and worked as a team
they were able to atleast save the patient.&lt;/p&gt;</content><author><name></name></author><category term="book-notes" /><summary type="html">What to trust in a ‘post-truth’ world By Dr. Atul Gawande. This book can be found here. Dr. Atul shows the benefits of a simple checklist against the complexity of our lives.</summary></entry></feed>