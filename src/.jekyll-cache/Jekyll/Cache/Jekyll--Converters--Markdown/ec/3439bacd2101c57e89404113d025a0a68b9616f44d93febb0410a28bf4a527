I"∑<h3 id="is-dataframe-just-a-table">Is Dataframe just a table?</h3>
<p>Full article can be found <a href="https://plateau-workshop.org/assets/papers-2019/10.pdf">here</a></p>

<h4 id="proposal">Proposal</h4>
<p>The author tries to explain the reasons why the design of dataframes and tables
are different.</p>

<h4 id="details">Details</h4>
<ul>
  <li>database folks think in terms of tables (aka relations)</li>
  <li>datascience folks think in terms of dataframes (read pandas)</li>
  <li>former uses lists, whereas the latter uses sets
    <ul>
      <li>author argues that this can have impact on how the implementations will differ
between these cases use-cases!</li>
      <li>because lists are dependent on the order whereas sets aren‚Äôt</li>
    </ul>
  </li>
  <li>matrices vs tables
    <ul>
      <li>matrices are good at aggregation kind of operations</li>
      <li>however, by storing variables also as columns, such a ‚Äúmatrix‚Äù could be converted
into a relation, thereby easing this process too!</li>
    </ul>
  </li>
  <li>however, tables seem to outshine dataframes when it comes to joins
    <ul>
      <li>closest operation in dataframes is a merge</li>
      <li>author argues that merge and concat ops in dataframes are not actually the same as
as in join and union ops in tables and these dataframes ops are needlessly
complicated!</li>
    </ul>
  </li>
  <li>dataframes are procedural interfaces while relations offer more declarative style</li>
  <li>sql ops, for eg, only support first-order logic (looping across items is 2nd order)</li>
  <li>code reuse is better with dataframes than with tables</li>
  <li>debugging is also better with dataframes</li>
  <li>tables have query-optimizers which can lead to better optimized operations internally
    <ul>
      <li>in dataframes, users have to manually tune for perf</li>
    </ul>
  </li>
  <li>dataframes offer many ways to solve one thing, which can be confusing to programmers</li>
</ul>
:ET