I"#<h3 id="lightgcn---simplifying-and-powering-graph-convolutionnetwork-for-recommendation">LightGCN - Simplifying and Powering Graph ConvolutionNetwork for Recommendation</h3>
<p>Main paper can be found <a href="https://arxiv.org/pdf/2002.02126.pdf">here</a></p>

<h4 id="proposal">Proposal</h4>
<p>For collaborative filtering, instead of using full GCNs they only keep the
neighborhood aggregation function and discard feature transformation and the
non-linear activation functions, thereby gaining better final accuracy as well
as simplifying the implementation.</p>

<h4 id="details">Details</h4>
<p>GCN was originally proposed for classification on rich attributes graph. However
in the case of CF, there are only user-item interaction graphs. They emperically
find that the NGCFâ€™s (Neural Graph Collaborative Filtering, inspired from GCN)
feature transformation and non-linear functions cause accuracy degradation. They
also needlessly increase the complexity of the model. Thus, in LightGCN, they
propose to remove these 2 operations and only keep the neighborhood aggregation.
They create an ID embedding for each user and item and use the user-item
interaction graph to propagate the current embeddings.</p>

<p>The core graph convolution operation that they are proposing is:</p>

\[e_u^{k+1} = \sum_{i \epsilon N_u} \frac{1}{\sqrt{N_i N_u}} e_i^k\]

\[e_i^{k+1} = \sum_{i \epsilon N_i} \frac{1}{\sqrt{N_i N_u}} e_u^k\]

<p>Note that self-connections are ignored here! As this will be handled in the
final layer combination phase. Final representation (aka combination phase) is:</p>

\[e_u = \sum_{k=0}^K \alpha_k e_u^k\]

\[e_i = \sum_{k=0}^K \alpha_k e_i^k\]

<p>\(\alpha_k\) can be hyper-params are model-params. In this paper, however, they
are setting them to be \(\frac{1}{K+1}\) for simplicity.</p>

<p>Final model prediction is: \(y_{ui} = e_u^T * e_i\)</p>

<p>Their code can be found:</p>
<ol>
  <li><a href="https://github.com/kuandeng/LightGCN">here</a> for TF</li>
  <li><a href="https://github.com/gusye1234/pytorch-light-gcn">here</a> for pytorch</li>
</ol>
:ET